apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "zookeeper.fullname" . }}
  labels:
    app: {{ include "zookeeper.name" . | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
    {{ default "snappyflow/appname" .Values.global.sfappname_key }}: {{ default .Release.Name .Values.global.sfappname }}
    {{ default "snappyflow/projectname" .Values.global.sfprojectname_key }}: {{ default .Release.Name .Values.global.sfprojectname }}
    snappyflow/component: zookeeper
spec:
  selector:
    matchLabels:
      app: {{ include "zookeeper.name" . | quote }}
      release: {{ .Release.Name | quote }}
      service: zookeeper
      {{ default "snappyflow/appname" .Values.global.sfappname_key }}: {{ default .Release.Name .Values.global.sfappname }}
      {{ default "snappyflow/projectname" .Values.global.sfprojectname_key }}: {{ default .Release.Name .Values.global.sfprojectname }}
  serviceName: {{ template "zookeeper.fullname" . }}-headless
  replicas: {{ .Values.servers }}
  updateStrategy:
{{ toYaml .Values.updateStrategy | indent 4 }}
  template:
    metadata:
      labels:
        app: {{ include "zookeeper.name" . | quote }}
        release: {{ .Release.Name | quote }}
        service: zookeeper
        {{ default "snappyflow/appname" .Values.global.sfappname_key }}: {{ default .Release.Name .Values.global.sfappname }}
        {{ default "snappyflow/projectname" .Values.global.sfprojectname_key }}: {{ default .Release.Name .Values.global.sfprojectname }}
        snappyflow/component: zookeeper
    spec:
{{- if .Values.schedulerName }}
      schedulerName: "{{ .Values.schedulerName }}"
{{- end }}
{{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - {{ include "zookeeper.name" . }}
                  - key: "release"
                    operator: In
                    values:
                    - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"
      containers:
      {{- if .Values.prometheus.jmx.enabled }}
      - name: metrics
        image: "{{ .Values.prometheus.jmx.image }}:{{ .Values.prometheus.jmx.imageTag }}"
        command:
        - java
        - -XX:+UnlockExperimentalVMOptions
        - -XX:+UseCGroupMemoryLimitForHeap
        - -XX:MaxRAMFraction=1
        - -XshowSettings:vm
        - -jar
        - jmx_prometheus_httpserver.jar
        - {{ .Values.prometheus.jmx.port | quote }}
        - /etc/jmx-kafka/jmx-kafka-prometheus.yml
        ports:
        - containerPort: {{ .Values.prometheus.jmx.port }}
        resources:
{{ toYaml .Values.prometheus.jmx.resources | indent 10 }}
        volumeMounts:
        - name: jmx-config
          mountPath: /etc/jmx-kafka
      {{- end }}
      - name: {{ template "zookeeper.name" . }}-server
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        image: mahendra0939/zookeeper-auditable:latest
        resources:
{{ toYaml .Values.resources | indent 10 }}
        ports:
        - containerPort: {{ .Values.clientPort }}
          name: client
        - containerPort: 8778
          name: jolokia
        - containerPort: {{ .Values.serverPort }}
          name: server
        - containerPort: {{ .Values.leaderElectionPort }}
          name: leader-election
        - containerPort: {{ .Values.jmxPort }}
          name: jmx-exporter
        env:
        - name : ZOOKEEPER_REPLICAS
          value: "{{ .Values.servers }}"
        - name : ZOOKEEPER_HEAP_SIZE
          value: "{{ .Values.heap }}"
        - name : ZOOKEEPER_TICK_TIME
          value: "{{ .Values.tickTimeMs }}"
        - name : ZOOKEEPER_INIT_LIMIT
          value: "{{ .Values.initTicks }}"
        - name : ZOOKEEPER_SYNC_LIMIT
          value: "{{ .Values.syncTicks }}"
        - name : ZOOKEEPER_MAX_CLIENT_CNXNS
          value: "{{ .Values.clientCnxns }}"
        - name: ZOOKEEPER_SNAP_RETAIN_COUNT
          value: "{{ .Values.snapRetain }}"
        - name: ZOOKEEPER_PURGE_INTERVAL
          value: "{{ .Values.purgeHours }}"
        - name: ZOOKEEPER_LOG_LEVEL
          value: {{ .Values.logLevel }}
        - name: ZOOKEEPER_CLIENT_PORT
          value: "{{ .Values.clientPort }}"
        - name: ZOOKEEPER_SERVER_PORT
          value: "{{ .Values.serverPort }}"
        - name: ZOOKEEPER_SERVER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name : ZOOKEEPER_SERVERS
          value: {{ template "zookeeper.serverlist" . }}
        - name: ZOOKEEPER_ELECTION_PORT
          value: "{{ .Values.leaderElectionPort }}"
        {{- if .Values.prometheus.jmx.enabled }}
        - name: KAFKA_JMX_PORT
          value: "{{ .Values.jmx.port }}"
        {{- end }}
        - name: KAFKA_JMX_OPTS
          value: "-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false"
        - name : ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT
          value: "{{ .Values.autoPurgeSnapRetainCount}}"
        - name : ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL
          value: "{{ .Values.autoPurgePurgeInterval}}"
        command:
        - "bash"
        - "-c"
        - |
          ZK_FIX_HOST_REGEX="s/${HOSTNAME}\.[^:]*:/0.0.0.0:/g"
          ZOOKEEPER_SERVER_ID=$((${HOSTNAME##*-}+1)) \
          ZOOKEEPER_SERVERS=`echo $ZOOKEEPER_SERVERS | sed -e "$ZK_FIX_HOST_REGEX"` \
          /etc/confluent/docker/run
        volumeMounts:
        - name: datadir
          mountPath: {{ .Values.persistence.mountPath | quote }}
        - name: varlog
          mountPath: /var/log/kafka
      {{ if not .Values.persistence.enabled }}
      volumes:
      - name: datadir
        emptyDir: {}
      {{- end }}
      - name: varlog
        emptyDir: {}
      {{- if .Values.prometheus.jmx.enabled }}
      - name: jmx-config
        configMap:
          {{- if .Values.jmx.configMap.overrideName }}
          name: {{ .Values.jmx.configMap.overrideName }}
          {{- else }}
          name: {{ include "zookeeper.fullname" . }}-metrics
          {{- end }}
      {{- end }}
      {{- if eq .Values.security.enabled true }}
      securityContext:
        runAsUser: {{ .Values.security.runAsUser }}
        fsGroup: {{ .Values.security.fsGroup }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: datadir
      annotations:
        volume.beta.kubernetes.io/storage-class: {{ .Values.persistence.storageClass }}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
  {{- end }}

